/*********************************************(GROL) Gladiators: Rise of Legends - Training.asClass for the Armory Screen: Weapons and armor*********************************************/package com.controllers {		import flash.display.MovieClip;	import com.models.Model;	import com.utils.CustomEvent;	import com.utils.Items;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.EventDispatcher;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.display.FrameLabel;	import flash.text.TextFormat;		public class Armory extends MovieClip {				private var m:Model = Model.instance;		private var ab:armorBlock = new armorBlock();		private var wb:weaponBlock = new weaponBlock();		private var item:Items = new Items();				private var limeFormat:TextFormat = new TextFormat();		private var greyFormat:TextFormat = new TextFormat();				public function Armory() {			//success_item_mc.visible = false; // 217			//success_mc.visible = false; // 155			//info_training.visible = true;			addEventListener(Event.ADDED_TO_STAGE, onLoad);		}				public function onLoad(e:Event):void{			trace("Class Armory Loaded");			addEventListener(MouseEvent.CLICK, parseTouch);			m.addEventListener(CustomEvent.LOAD_ARMORY, loadArmory);			armor_frame.visible = false;			armor_info.visible = false;			greyFormat.color = 0x999999; 			limeFormat.color = 0x33FF33;   		}				public function parseTouch(e:MouseEvent):void{			switch(e.target.name){				case "weapon_bttn_mc" :					weapons_bttn_txt.setTextFormat(limeFormat);					armor_bttn_txt.setTextFormat(greyFormat);					weapon_frame.visible = true;					armor_frame.visible = false;					weapon_info.visible = true;					armor_info.visible = false;					break;				case "armor_bttn_mc" :					weapons_bttn_txt.setTextFormat(greyFormat);					armor_bttn_txt.setTextFormat(limeFormat);					weapon_frame.visible = false;					armor_frame.visible = true;					weapon_info.visible = false;					armor_info.visible = true;					break;				default : break;			}		}				public function loadArmory(event:CustomEvent):void{			trace("Armory XML:"+event.dataObj);			var xmlListWeapons:XMLList = event.dataObj.armory.weapons.item;			var xmlListArmor:XMLList = event.dataObj.armory.armor.item;			m.getStatusUpdate(event.dataObj);						try{while(weapon_frame.numChildren){weapon_frame.removeChildAt(0);} }			catch(error:Error){trace("ERROR: Frame Reset");}			try{while(armor_frame.numChildren){armor_frame.removeChildAt(0);} }			catch(error:Error){trace("ERROR: Frame Reset");}						var tempReq:String = "";			var i:uint=0;			for(i=0;i<xmlListWeapons.length();i++){				if(Number(m.currentLevel) < Number(xmlListWeapons[i].level)){					//break;				}								wb = new weaponBlock();				wb.title_txt.text = xmlListWeapons[i].title;				wb.cost_txt.text = xmlListWeapons[i].cost;				wb.owned_txt.text = "Own "+xmlListWeapons[i].owned;				wb.dmg_txt.text = xmlListWeapons[i].dmg;				wb.pre_txt.text = xmlListWeapons[i].pre;				wb.def_txt.text = xmlListWeapons[i].def;				tempReq = "";				if(xmlListWeapons[i].req_strength != "0" && xmlListWeapons[i].req_strength != ""){					tempReq += " "+xmlListWeapons[i].req_strength+" Strength";				}				if(xmlListWeapons[i].req_quickness != "0" && xmlListWeapons[i].req_quickness != ""){					tempReq += " "+xmlListWeapons[i].req_quickness+" Quickness";				}				if(xmlListWeapons[i].req_fortitude != "0" && xmlListWeapons[i].req_fortitude != ""){					tempReq += " "+xmlListWeapons[i].req_fortitude+" Fortitude";				}				wb.req_txt.text = tempReq;				wb.img_holder.addChild(item.parseItems(xmlListWeapons[i].img));								wb.uid = xmlListWeapons[i].uid;				wb.sell = xmlListWeapons[i].sell;				wb.addEventListener(MouseEvent.CLICK, parseWeaponClick);				function parseWeaponClick(e:MouseEvent):void{					trace("Pick Weapon "+e.currentTarget.uid);				}				weapon_frame.addChild(wb);				wb.y += i*150;			}						for(i=0;i<xmlListArmor.length();i++){				if(Number(m.currentLevel) < Number(xmlListArmor[i].level)){				trace("wtf");					//break;				}				ab = new armorBlock();				ab.title_txt.text = xmlListArmor[i].title;				ab.cost_txt.text = xmlListArmor[i].cost;				ab.owned_txt.text = "Own "+xmlListArmor[i].owned;				ab.def_txt.text = xmlListArmor[i].def;				ab.pro_txt.text = xmlListArmor[i].pro;				ab.mod_txt.text = xmlListArmor[i].mod;				tempReq = "";				if(xmlListArmor[i].req_strength != "0" && xmlListArmor[i].req_strength != ""){					tempReq += " "+xmlListArmor[i].req_strength+" Strength";				}				if(xmlListArmor[i].req_quickness != "0" && xmlListArmor[i].req_quickness != ""){					tempReq += " "+xmlListArmor[i].req_quickness+" Quickness";				}				if(xmlListArmor[i].req_fortitude != "0" && xmlListArmor[i].req_fortitude != ""){					tempReq += " "+xmlListArmor[i].req_fortitude+" Fortitude";				}				ab.req_txt.text = tempReq;				ab.img_holder.addChild(item.parseItems(xmlListArmor[i].img));								ab.uid = xmlListArmor[i].uid;				ab.sell = xmlListArmor[i].sell;				ab.addEventListener(MouseEvent.CLICK, parseArmorClick);				function parseArmorClick(e:MouseEvent):void{					trace("Pick Armor "+e.currentTarget.uid);				}				armor_frame.addChild(ab);				ab.y += i*150;			}		}			}	}