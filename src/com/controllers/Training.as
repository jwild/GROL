/*********************************************(GROL) Gladiators: Rise of Legends - Training.asClass for the Training Screen: The quests/missions for the game*********************************************/package com.controllers {		import flash.display.MovieClip;	import com.models.Model;	import com.utils.CustomEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.EventDispatcher;		public class Training extends MovieClip {				private var m:Model = Model.instance;		private var qb:questBlock = new questBlock();				public function Training() {			success_item_mc.visible = false; // 217			success_mc.visible = false; // 155			info_training.visible = true;			addEventListener(Event.ADDED_TO_STAGE, onLoad);		}				public function onLoad(e:Event):void{			trace("Class Training Loaded");			addEventListener(MouseEvent.CLICK, parseTouch);			m.addEventListener(CustomEvent.LOAD_TRAINING, loadTraining);			m.addEventListener(CustomEvent.COMPLETE_TRAINING, completeTraining);		}				public function parseTouch(e:MouseEvent):void{			switch(e.target.name){				case "cont_bttn_mc" :					//m.gotoScreen = "firstQuest";					break;				default : break;			}		}				public function loadTraining(event:CustomEvent):void{			//this is where we listen for the return on the training quests so we can parse them and load them into their shells			var xmlList:XMLList = event.dataObj.training.t;			m.getStatusUpdate(event.dataObj);			try{while(training_frame.numChildren){ training_frame.removeChildAt(0);} }			catch(error:Error){trace("ERROR: Frame Reset");}						for(var i:uint=0;i<xmlList.length();i++){				//trace(xmlList[i].title);				if(Number(m.currentLevel) < Number(xmlList[i].level)){					//break;				}								qb = new questBlock();				qb.title_txt.text = xmlList[i].title;				qb.coin_min_txt.text = xmlList[i].coin_min;				qb.coin_max_txt.text = xmlList[i].coin_max;				qb.exp_txt.text = xmlList[i].exp;				qb.quest_rank_txt.text = xmlList[i].rank_percent+"% Rank "+xmlList[i].rank;				qb.req_txt.text = xmlList[i].req;				qb.uid = xmlList[i].uid;								qb.addEventListener(MouseEvent.CLICK, parseTraining);				function parseTraining(e:MouseEvent):void{					trace("Doing Training "+e.currentTarget.uid);				}								training_frame.addChild(qb);				qb.y += i*150;			}		}				public function completeTraining(event:CustomEvent):void{			var mydata:XML = event.dataObj;			var xmlList:XMLList = mydata.trainingsuccess.t;			//trace(xmlList.title);			//check if there was an item return on the node, if so show the success_item_mc			//success_mc.visible = true; //move frame to 306 or 370 for item			//training_frame.y = 306;			if(String(xmlList.item_won) != ""){				success_item_mc.visible = true;				training_frame.y = 367;			} else {				success_mc.visible = true;				training_frame.y = 312;			}								}			}	}