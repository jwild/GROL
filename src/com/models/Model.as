/*********************************************(GROL) Gladiators: Rise of Legends - Model.asThis is the event dispatcher and is where custom events are stored and data.THIS IS A SINGLETON FILE!*********************************************/package com.models {		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.net.URLLoader;	import flash.net.URLRequest;	import com.utils.CustomEvent;	import com.utils.StaticDatabase;	import flash.events.IOErrorEvent;		public class Model extends EventDispatcher {				private static const _instance:Model = new Model(SingletonLock);		private var _inited:Boolean = false;				public static const CLASS_START_LOADED:String = "loaded";		public static const CLASS_SELECTION_LOADED:String = "classselection";		/****** MOVE THESE TO NEW CLASS ******/		private var loader:URLLoader = new URLLoader();		private var loadTraining:URLLoader = new URLLoader();		private var loadArmory:URLLoader = new URLLoader();		/****** RETAIN XML CALLS *****/		public var trainingXML:XML;		public var armoryXML:XML;		public var statusXML:XMLList;		/****** RETAIN VARIABLES *****/		private var _gladiatorClass:String = "slave";		private var _currentLevel:String = "1";		private var _currentCoin:String = "0";		private var _currentXP:String = "0";		private var _currentIntensity:String = "20";		private var _currentVigor:String = "100";		private var _currentEndurance:String = "3";		private var _gladiatorName:String = "";				private var _gotoScreen:String = "";		private var _currentScreen:String = "";				private var sd:StaticDatabase = StaticDatabase.instance;				public function Model(sLock:Class){			if(sLock != SingletonLock){				trace("Invalid access. Please try the following: Model.instance");			}						//loader.dataFormat = URLLoaderDataFormat.VARIABLES;			//request.data = _vars;			//request.method = URLRequestMethod.POST;			//loader.addEventListener(Event.COMPLETE, onComplete);			//loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);						sd.updateProfileStats(0,0,0,0,0); //for dev testing		}				public function onComplete(event:Event):void{			//trace("Par: " + event.data.par);			//trace("Message: " + event.data.msg);		}				public function onIOError(event:IOErrorEvent):void{			trace("Error loading URL.");		}				public static function get instance():Model{			if(!_instance._inited){				_instance._inited = true;			}			return _instance;		}						public function get gladiatorName():String{ return _gladiatorName;}		public function set gladiatorName(value:String):void{_gladiatorName = value; /*dispatchEvent(new CustomEvent(CustomEvent.LOAD_GLADIATOR_CLASS, gladiatorClass));*/}				public function get gladiatorClass():String{ return _gladiatorClass;}		public function set gladiatorClass(value:String):void{_gladiatorClass = value; dispatchEvent(new CustomEvent(CustomEvent.LOAD_GLADIATOR_CLASS, gladiatorClass));}				public function get gotoScreen():String{ return _gotoScreen;}		public function set gotoScreen(value:String):void{_gotoScreen = value;dispatchEvent(new CustomEvent(CustomEvent.CHANGE_SCREEN, gotoScreen)); }				public function get currentScreen():String{ return _currentScreen;}		public function set currentScreen(value:String):void{_currentScreen = value; /*dispatchEvent(new Event(Model.CHANGE_SCREEN));*/ }				public function get currentLevel():String{ return _currentLevel;}		public function set currentLevel(value:String):void{_currentLevel = value; }				public function get currentCoin():String{ return _currentCoin;}		public function set currentCoin(value:String):void{_currentCoin = value; }				public function get currentXP():String{ return _currentXP;}		public function set currentXP(value:String):void{_currentXP = value; }				public function get currentIntensity():String{ return _currentIntensity;}		public function set currentIntensity(value:String):void{_currentIntensity = value; }				public function get currentVigor():String{ return _currentVigor;}		public function set currentVigor(value:String):void{_currentVigor = value; }				public function get currentEndurance():String{ return _currentEndurance;}		public function set currentEndurance(value:String):void{_currentEndurance = value; }				/*****************************************************************************************************		The following functions for loading data need to be abstracted into another class near dev completion.		*****************************************************************************************************/				public function getStatusUpdate(xml:XML):void{			try{				statusXML = xml.stats;				dispatchEvent(new CustomEvent(CustomEvent.STATUS_UPDATE, statusXML));			} catch(error:Error){trace("STATUS UPDATE FAILED: NO XML");}		}				public function loadTrainingXML():void{			//loadTraining.addEventListener(Event.COMPLETE, getTrainingXML);			//loadTraining.load(new URLRequest("com/grol/training.xml"));						var xml:XML = sd.createXML("training");			getStatusUpdate(xml);			trainingXML = xml;			dispatchEvent(new CustomEvent(CustomEvent.LOAD_TRAINING, xml));		}				public function getTrainingXML(event:Event):void{ //load training xml			//var xml = new XML(event.target.data);			//getStatusUpdate(xml);			//trainingXML = xml;			//dispatchEvent(new CustomEvent(CustomEvent.LOAD_TRAINING, xml));		}				public function loadArmoryXML():void{			loadArmory.addEventListener(Event.COMPLETE, getArmoryXML);			loadArmory.load(new URLRequest("com/grol/armory.xml"));		}				public function getArmoryXML(event:Event):void{ //load training xml			trace("armory xml loaded");			var xml = new XML(event.target.data);			getStatusUpdate(xml);			armoryXML = xml;			dispatchEvent(new CustomEvent(CustomEvent.LOAD_ARMORY, xml));		}				public function train(uid:Number):void{ 			//this is where we place the training call and eventlistener for the return			//addEventListener(Event.COMPLETE, trainingComplete);//will need to add the event type to function when this is un commented			//code here: send call to backend with uid of training/quest to be performed, the listener above will handle results			trainingComplete();//temp: force as if the call went through, this is a bypass		}				private function trainingComplete(/*event:Event*/):void{			trace("training complete");			var xml:XML = sd.createXML("completetraining");			dispatchEvent(new CustomEvent(CustomEvent.COMPLETE_TRAINING, xml));						gotoScreen = "trainingScreen";		}					}	}class SingletonLock{}